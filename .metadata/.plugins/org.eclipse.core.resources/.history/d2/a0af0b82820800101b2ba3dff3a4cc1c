package com.lms.attendance.controller;

import com.lms.attendance.model.TeamActivityApplication;
import com.lms.attendance.model.TeamActivityComment;
import com.lms.attendance.service.TeamActivityService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/team-activities")
public class TeamActivityController {
    private final TeamActivityService teamActivityService;

    public TeamActivityController(TeamActivityService teamActivityService) {
        this.teamActivityService = teamActivityService;
    }

    // 팀 활동 게시물에 참석 신청 (학생이 참가 신청)
    @PostMapping("/{postId}/apply")
    public ResponseEntity<TeamActivityApplication> applyForTeamActivity(
            @PathVariable("postId") int postId,
            @RequestParam("applicantId") String applicantId) {
        TeamActivityApplication application = new TeamActivityApplication();
        application.setPostId(postId);
        application.setApplicantStudentId(applicantId);
        application.setStatus("PENDING");
        teamActivityService.applyForTeamActivity(application);
        return ResponseEntity.ok(application);
    }

    // 참석 신청 승인 (게시물 작성자만 승인할 수 있도록 추후 보안 적용)
    @PutMapping("/applications/{applicationId}/approve")
    public ResponseEntity<String> approveApplication(@PathVariable("applicationId") int applicationId) {
        teamActivityService.updateApplicationStatus(applicationId, "APPROVED");
        return ResponseEntity.ok("참가 신청이 승인되었습니다.");
    }

    // 참석 신청 거절
    @PutMapping("/applications/{applicationId}/reject")
    public ResponseEntity<String> rejectApplication(@PathVariable("applicationId") int applicationId) {
        teamActivityService.updateApplicationStatus(applicationId, "REJECTED");
        return ResponseEntity.ok("참가 신청이 거절되었습니다.");
    }

    // 특정 게시물에 대한 참석 신청 목록 조회
    @GetMapping("/{postId}/applications")
    public ResponseEntity<List<TeamActivityApplication>> getApplicationsByPost(@PathVariable("postId") int postId) {
        List<TeamActivityApplication> applications = teamActivityService.getApplicationsByPostId(postId);
        return ResponseEntity.ok(applications);
    }

    // 팀 활동 게시물에 댓글 추가
    @PostMapping("/{postId}/comments")
    public ResponseEntity<TeamActivityComment> addComment(
            @PathVariable("postId") int postId,
            @RequestBody TeamActivityComment comment) {
        comment.setPostId(postId);
        teamActivityService.addComment(comment);
        return ResponseEntity.ok(comment);
    }

    // 특정 게시물에 작성된 댓글 조회
    @GetMapping("/{postId}/comments")
    public ResponseEntity<List<TeamActivityComment>> getComments(@PathVariable("postId") int postId) {
        List<TeamActivityComment> comments = teamActivityService.getCommentsByPostId(postId);
        return ResponseEntity.ok(comments);
    }
}
