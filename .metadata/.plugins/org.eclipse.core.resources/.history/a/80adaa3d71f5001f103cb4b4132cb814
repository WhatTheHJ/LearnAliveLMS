package com.korea.attendance.controller;

import com.korea.attendance.model.*;
import com.korea.attendance.service.SurveyService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/surveys") // ✅ API 기본 경로
public class SurveyController {

    private final SurveyService surveyService;

    public SurveyController(SurveyService surveyService) {
        this.surveyService = surveyService;
    }

    /** ✅ 특정 강의실의 모든 설문조사 게시판 조회 */
    @GetMapping("/boards/{classId}")
    public ResponseEntity<List<SurveyBoard>> getSurveyBoards(@PathVariable("classId") int classId) {
        return ResponseEntity.ok(surveyService.getSurveyBoardsByClassId(classId));
    }
    
    /** ✅ 설문조사 게시판 생성 (생성 후 반환 보장) */
    @PostMapping("/board/{classId}")
    public ResponseEntity<SurveyBoard> createSurveyBoard(@PathVariable("classId") int classId) {
        surveyService.createSurveyBoard(classId);
        
        // ✅ 게시판이 생성되었는지 다시 조회하여 반환
        SurveyBoard createdBoard = surveyService.getSurveyBoardByClassId(classId);
        if (createdBoard == null) {
            return ResponseEntity.badRequest().build(); // 생성 실패 시 400 반환
        }

        return ResponseEntity.ok(createdBoard);
    }

    /** ✅ 설문조사 생성 */
    @PostMapping("/post/{classId}") // 🔥 classId 추가하여 Board 확인 후 Post 생성
    public ResponseEntity<Integer> createSurvey(@PathVariable("classId") int classId, @RequestBody SurveyPost surveyPost) {
        // ✅ 설문조사 게시판을 먼저 가져오거나 생성
        SurveyBoard board = surveyService.getOrCreateSurveyBoard(classId);
        surveyPost.setBoardId(board.getBoardId()); // 🔥 boardId를 명확하게 설정
        
        // ✅ 설문조사 생성
        surveyService.createSurveyPost(surveyPost);

        // ✅ 생성된 surveyId 반환
        return ResponseEntity.ok(surveyPost.getSurveyId());
    }

    /** ✅ 특정 게시판의 설문조사 목록 조회 */
    @GetMapping("/post/{boardId}")
    public ResponseEntity<List<SurveyPost>> getSurveyPosts(@PathVariable("boardId") int boardId) {
        return ResponseEntity.ok(surveyService.getSurveyPostsByBoardId(boardId));
    }

    /** ✅ 설문 질문 추가 */
    @PostMapping("/question")
    public ResponseEntity<String> createSurveyQuestion(@RequestBody SurveyQuestion question) {
        surveyService.createSurveyQuestion(question);
        return ResponseEntity.ok("질문 추가 완료");
    }

    /** ✅ 특정 설문조사의 질문 목록 조회 */
    @GetMapping("/question/{surveyId}")
    public ResponseEntity<List<SurveyQuestion>> getSurveyQuestions(@PathVariable("surveyId") int surveyId) {
        return ResponseEntity.ok(surveyService.getSurveyQuestionsBySurveyId(surveyId));
    }

    /** ✅ 설문 응답 저장 */
    @PostMapping("/response")
    public ResponseEntity<String> submitSurveyResponse(@RequestBody SurveyResponse response) {
        surveyService.saveSurveyResponse(response);
        return ResponseEntity.ok("응답 저장 완료");
    }

    /** ✅ 특정 설문조사의 응답 목록 조회 */
    @GetMapping("/response/{surveyId}")
    public ResponseEntity<List<SurveyResponse>> getSurveyResponses(@PathVariable("surveyId") int surveyId) {
        return ResponseEntity.ok(surveyService.getSurveyResponsesBySurveyId(surveyId));
    }
}
