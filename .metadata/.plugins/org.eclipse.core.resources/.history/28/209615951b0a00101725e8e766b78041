package com.lms.attendance.service;

import com.lms.attendance.model.AlarmList;
import com.lms.attendance.model.AlarmMessage;
import com.lms.attendance.repository.AlarmListMapper;

import lombok.RequiredArgsConstructor;

import java.util.ArrayList;
import java.util.List;

import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AlarmSender {
	
	private final AlarmListService alarmListService;
	private final AlarmListMapper alarmListMapper;
    private final SimpMessagingTemplate messagingTemplate;

    public void sendToClass(int classId, AlarmMessage message) {
        String destination = "/topic/class/" + classId + "/event";
        messagingTemplate.convertAndSend(destination, message);
        
        List<String> userIds = new ArrayList<>();
        userIds.addAll(alarmListMapper.findStudentIdsByClassId(classId));
        
     // 교수자
        String profId = alarmListMapper.findProfessorIdByClassId(classId);
        if (profId != null) {
            userIds.add(profId);
        }
        
        // 예시용: 테스트용 유저에게 저장
        AlarmList alarm = new AlarmList();
//        alarm.setClassId(classId);        alarm.setType(message.getType());
//        alarm.setTitle(message.getTitle());
//        alarm.setCreatedAt(message.getCreatedAt());
//        alarm.setRead(false); //Lombok은 setIsRead()를 만들지 않음
     // 알림 전송 + 저장
        for (String userId : userIds) {
            alarm.setUserId(userId);
            alarmListService.saveAlarm(alarm);
        }

        alarmListService.saveAlarm(alarm);
    }
    
    
}
