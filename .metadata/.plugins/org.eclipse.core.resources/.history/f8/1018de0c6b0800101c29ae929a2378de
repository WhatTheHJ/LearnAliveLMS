package com.lms.attendance.controller;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.lms.attendance.model.Schedule;
import com.lms.attendance.model.Todo;
import com.lms.attendance.service.ScheduleService;

@RestController
@RequestMapping("/api/schedules/{userId}")
public class ScheduleController {

    @Autowired
    private ScheduleService scheduleService;

    @GetMapping("/")
    public ResponseEntity<Map<String, Object>> getAllSchedule(@PathVariable("userId") String userId) {
        try {
            // userId에 해당하는 일정 조회
            List<Schedule> schedules = scheduleService.getScheduleByUserId(userId);
            // 투두 리스트 조회
            List<Todo> todos = scheduleService.getTodosByUserId(userId);
            
            if (schedules.isEmpty() && todos.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 둘 다 없으면 204 반환
            }
            // 일정과 투두 리스트를 함께 반환
            Map<String, Object> response = new HashMap<>();
            response.put("schedules", schedules);
            response.put("todos", todos);
            
            return ResponseEntity.ok(response); // 일정들이 있을 경우 200 상태와 함께 반환
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); // 에러가 발생하면 500 상태 반환
        }
    }
    
    // 일정 추가
    @PostMapping("/")
    public ResponseEntity<String> createSchedule(@RequestBody Schedule schedule) {
        try {
            scheduleService.createSchedule(schedule);
            return new ResponseEntity<>("Schedule created successfully", HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Error creating schedule", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 일정 삭제
    @DeleteMapping("/{scheduleId}")
    public ResponseEntity<?> deleteSchedule(@PathVariable("scheduleId") int scheduleId) {
    	  System.out.println("삭제할 scheduleId: " + scheduleId); // 로그 추가
    	    
    	    // 실제 삭제 로직을 호출
    	    scheduleService.deleteSchedule(scheduleId);
    	    
    	    return ResponseEntity.ok("삭제 완료");
    }

    // 일정 수정
    @PutMapping("/{scheduleId}")
    public ResponseEntity<String> updateSchedule(@PathVariable("scheduleId") int scheduleId, @RequestBody Schedule schedule) {
        try {
            schedule.setScheduleId(scheduleId);  // Update the schedule ID
            scheduleService.updateSchedule(schedule);
            return new ResponseEntity<>("Schedule updated successfully", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Error updating schedule", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 날짜별 일정 조회
    @GetMapping("/{date}")
    public ResponseEntity<List<Schedule>> getScheduleByDate(@PathVariable String date) {
        try {
            LocalDate localDate = LocalDate.parse(date);
            List<Schedule> schedules = scheduleService.getScheduleByDate(localDate);
            return new ResponseEntity<>(schedules, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 알람이 설정된 일정 조회
    @GetMapping("/alarm")
    public ResponseEntity<List<Schedule>> getSchedulesWithAlarm() {
        try {
            List<Schedule> schedules = scheduleService.getSchedulesWithAlarm();
            return new ResponseEntity<>(schedules, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
 //------------------------------todo
    // 추가
    @PostMapping("/todo")
    public ResponseEntity<String> createTodo(@RequestBody Todo todo) {
        try {
            scheduleService.createTodo(todo);
            return new ResponseEntity<>("Todo created successfully", HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Error creating Todo", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
}
