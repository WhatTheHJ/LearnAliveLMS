package com.lms.attendance.controller;


import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.lms.attendance.model.Post;
import com.lms.attendance.service.PostService;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/api/posts")
public class PostController {

    private final PostService postService;

    @Autowired
    public PostController(PostService postService) {
        this.postService = postService;
    }

 // 게시글 목록 조회
    @GetMapping("/{boardId}/post")
    public ResponseEntity<List<Post>> getAllPosts(@PathVariable("boardId") int boardId) {
        List<Post> posts = postService.getAllPosts(boardId); // boardId에 맞는 게시글 목록 조회
        return ResponseEntity.ok(posts); // JSON 형식으로 응답
    }
    
    @GetMapping("/{postId}")
    public ResponseEntity<List<Post>> getPostById(@PathVariable("postId") int postId) {
        List<Post> posts = postService.getPostById(postId); // postId에 맞는 게시글 목록 조회
        return ResponseEntity.ok(posts); // JSON 형식으로 응답
    }

   
    // 게시글 추가 (REST API 방식)
//    @PostMapping("/{boardId}/post/new")
//    public ResponseEntity<Post> createPost(@PathVariable("boardId") int boardId, @RequestBody Post post) {
//        
//    	System.out.println("Author ID: " + post.getAuthorId());
//        System.out.println("Author Role: " + post.getAuthorRole());
//    	
//    	Post createdPost = postService.createPost(boardId, post); // 게시글 생성
//        return ResponseEntity.ok(createdPost);
//    }
    
 // 게시글 추가 (REST API 방식) (파일 업로드 포함)
   
 // 게시글 추가 (파일 업로드 포함)
    @PostMapping("/{boardId}/post/new")
    public ResponseEntity<Post> createPost(@PathVariable("boardId") int boardId, 
    										Post post,
                                           @RequestParam("file") MultipartFile file, 
                                           @RequestParam("title") String title,
                                           @RequestParam("content") String content,
                                           @RequestParam("authorId") String authorId,
                                           @RequestParam("authorRole") String authorRole) throws IOException {

        // 파일이 있으면 파일을 저장
        String fileName = null;
        if (!file.isEmpty()) {
            fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
            Path uploadPath = Paths.get(System.getProperty("user.home") + "/uploads/");
            
            // 디렉토리 없으면 생성
            if (!Files.exists(uploadPath)) {
                Files.createDirectories(uploadPath);
            }
            
            // 파일 저장
            file.transferTo(uploadPath.resolve(fileName).toFile());
        }
        Post createdPost= postService.createPost(boardId, post)
        // 게시글 생성 후 응답 반환
        return ResponseEntity.ok(createdPost);
    }

    
    
    
 // 게시판 삭제
    @DeleteMapping("/{postId}/delete")
    public ResponseEntity<String> deletePost(@PathVariable("postId") int postId) {
        postService.deletePostByPostId(postId);
        return ResponseEntity.ok("게시글 삭제 성공");
    }
   
    //수정
    @PutMapping("/{postId}/update")
    public ResponseEntity<Post> updatePost(
            @PathVariable("postId") int postId, 
            @RequestBody Post updatedPost) {
    	 Post updated = postService.updatePost(postId, updatedPost); // 게시글 수정 서비스 호출
    	    return ResponseEntity.ok(updated);
    	}
    }

    
//    @PostMapping()
    
//    @GetMapping("/{boardId}/post/new")
//    public String showCreatePostForm() {
//    	return "create-post.html";
//    }
//
//    @PostMapping("/{boardId}/post/new")
//    public String createPost(Post post) {
//        postService.createPost(post); // 게시글 생성
//        return "create-post.html"; // 게시글 목록 페이지로 리디렉션
//    }


