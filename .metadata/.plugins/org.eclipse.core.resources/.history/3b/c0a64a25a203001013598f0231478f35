package com.lms.attendance.repository;

import java.util.List;

import org.apache.ibatis.annotations.*;

import com.lms.attendance.model.Exam;
import com.lms.attendance.model.ExamQuestion;



@Mapper
public interface ExamMapper {

	//새로운 시험 추가
    @Insert("INSERT INTO Exam (class_id, prof_id, prof_name, title, start_time, end_time, question_count) VALUES (#{classId}, #{profId}, #{profName}, #{title}, #{startTime}, #{endTime}, #{questionCount})")
    @Options(useGeneratedKeys = true, keyProperty = "examId")
    void createExam(Exam exam);

    
    //특정 클래스의 시험 목록 가져오기
    @Select("SELECT * FROM Exam WHERE class_id = #{classId}")
    @Results({
    	 @Result(property = "examId", column = "exam_id"),
         @Result(property = "classId", column = "class_id"),
         @Result(property = "profId", column = "prof_id"),
         @Result(property = "profName", column = "prof_name"),
         @Result(property = "title", column = "title"),
         @Result(property = "startTime", column = "start_time"),
         @Result(property = "endTime", column = "end_time"),
         @Result(property = "createdAt", column = "created_at"),
         @Result(property = "updatedAt", column = "updated_at"),
         @Result(property = "questionCount", column = "question_count")
    })
    List<Exam> findByClassId(int classId); 
	
    
    //특정 시험 상세 보기
    @Select("SELECT * FROM Exam WHERE exam_id = #{examId}")
    @Results({
        @Result(property = "examId", column = "exam_id"),
        @Result(property = "classId", column = "class_id"),
        @Result(property = "profId", column = "prof_id"),
        @Result(property = "profName", column = "prof_name"), 
        @Result(property = "title", column = "title"),
        @Result(property = "startTime", column = "start_time"),
        @Result(property = "endTime", column = "end_time"),
        @Result(property = "createdAt", column = "created_at"),
        @Result(property = "updatedAt", column = "updated_at"),
        @Result(property = "questionCount", column = "question_count")
    })
    Exam getExamById(int examId);
    
    
    //시험 삭제
    @Delete("DELETE FROM Exam WHERE exam_id = #{examId}")
    void deleteExam(int examId);

    
    //시험 수정
    @Update("UPDATE Exam SET title = #{title}, prof_name = #{profName}, start_time = #{startTime}, end_time = #{endTime} WHERE exam_id = #{examId}")
    void updateExam(Exam exam);

   
    
    //  전체 시험 목록 가져오기
    @Select("SELECT * FROM Exam")
    List<Exam> findAll();
    
    
    @Insert("INSERT INTO Exam_Question (exam_id, question_text, question_type, correct_answer) VALUES (#{examId}, #{questionText}, #{questionType}, #{correctAnswer})")
    void createExamQuestion(ExamQuestion question); // 문제 저장

    
}