package com.korea.attendance.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.korea.attendance.model.Survey;
import com.korea.attendance.model.SurveyBoard;
import com.korea.attendance.model.SurveyQuestion;
import com.korea.attendance.model.SurveyResponse;
import com.korea.attendance.service.SurveyService;

@RestController
@RequestMapping("/api/surveys") // ✅ API 기본 경로
public class SurveyController {

    private final SurveyService surveyService;

    public SurveyController(SurveyService surveyService) {
        this.surveyService = surveyService;
    }

    /** ✅ 특정 강의실의 모든 설문조사 게시판 조회 */
    @GetMapping("/boards/{classId}")
    public ResponseEntity<List<SurveyBoard>> getSurveyBoards(@PathVariable("classId") int classId) {
        return ResponseEntity.ok(surveyService.getSurveyBoardsByClassId(classId));
    }
    
    /** ✅ 설문조사 게시판 생성 (생성 후 반환 보장) */
    @PostMapping("/board/{classId}")
    public ResponseEntity<SurveyBoard> createSurveyBoard(@PathVariable("classId") int classId) {
        surveyService.createSurveyBoard(classId);
        
        // ✅ 게시판이 생성되었는지 다시 조회하여 반환
        SurveyBoard createdBoard = surveyService.getSurveyBoardByClassId(classId);
        if (createdBoard == null) {
            return ResponseEntity.badRequest().build(); // 생성 실패 시 400 반환
        }

        return ResponseEntity.ok(createdBoard);
    }
    
    /** ✅ 특정 게시판의 설문조사 목록 조회 */
    @GetMapping("/board/{boardId}/surveys")
    public List<Survey> getSurveysByBoard(@PathVariable int boardId) {
        return surveyService.getSurveysByBoard(boardId);
    }
    
    /** ✅ 설문조사 + 질문을 한 번에 저장 */
    @PostMapping("/create")
    public Survey createSurveyWithQuestions(@RequestBody Survey survey) {
        return surveyService.createSurveyWithQuestions(survey);
    }

    /** ✅ 특정 설문조사의 질문 목록 조회 */
    @GetMapping("/survey/{surveyId}/questions")
    public List<SurveyQuestion> getSurveyQuestions(@PathVariable int surveyId) {
        return surveyService.getSurveyQuestions(surveyId);
    }

    /** ✅ 특정 설문조사의 응답 목록 조회 */
    @GetMapping("/survey/{surveyId}/responses")
    public List<SurveyResponse> getSurveyResponses(@PathVariable int surveyId) {
        return surveyService.getSurveyResponses(surveyId);
    }

    /** ✅ 특정 학생이 특정 설문조사에 대한 응답 조회 */
    @GetMapping("/survey/{surveyId}/student/{studentId}/responses")
    public List<SurveyResponse> getStudentSurveyResponses(@PathVariable int surveyId, @PathVariable String studentId) {
        return surveyService.getStudentSurveyResponses(surveyId, studentId);
    }

    /** ✅ 특정 학생이 응답한 모든 설문조사 목록 조회 */
    @GetMapping("/student/{studentId}/surveys")
    public List<Survey> getStudentSurveys(@PathVariable String studentId) {
        return surveyService.getStudentSurveys(studentId);
    }
}
