package com.korea.attendance.service;

import com.korea.attendance.repository.SurveyMapper;
import com.korea.attendance.model.*;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class SurveyService {
    private final SurveyMapper surveyMapper;

    public SurveyService(SurveyMapper surveyMapper) {
        this.surveyMapper = surveyMapper;
    }

    /** ✅ 특정 강의실의 설문조사 게시판 목록 조회 */
    public List<SurveyBoard> getSurveyBoardsByClassId(int classId) {
        List<SurveyBoard> boards = surveyMapper.findSurveyBoardsByClassId(classId);

        // ✅ 만약 boards가 비어있다면 새로운 게시판 자동 생성 후 조회
        if (boards.isEmpty()) {
            surveyMapper.createSurveyBoard(classId);
            boards = surveyMapper.findSurveyBoardsByClassId(classId);
        }

        return boards;
    }

    /** ✅ 설문조사 게시판 생성 */
    public void createSurveyBoard(int classId) {
        surveyMapper.createSurveyBoard(classId);
    }
    
    /** ✅ 특정 강의실의 설문조사 게시판이 없으면 생성 후 반환 */
    public SurveyBoard getOrCreateSurveyBoard(int classId) {
        SurveyBoard board = surveyMapper.getSurveyBoardByClassId(classId);
        if (board == null) {
            surveyMapper.createSurveyBoard(classId);
            board = surveyMapper.getSurveyBoardByClassId(classId);
        }
        return board;
    }

    /** ✅ 설문조사 생성 (게시판이 없으면 자동 생성) */
    public void createSurveyPost(SurveyPost surveyPost) {
        // 🔥 boardId가 설정되지 않았다면 오류 방지
        if (surveyPost.getBoardId() == 0 || surveyPost.getBoardId() == 0) {
            throw new IllegalArgumentException("게시판 ID(boardId)가 설정되지 않았습니다.");
        }
        
        surveyMapper.createSurveyPost(surveyPost);
    }
    
    /** ✅ 특정 게시판의 설문조사 목록 조회 */
    public List<SurveyPost> getSurveyPostsByBoardId(int boardId) {
        return surveyMapper.getSurveyPostsByBoardId(boardId);
    }

    /** ✅ 설문 질문 추가 */
    public void createSurveyQuestion(SurveyQuestion question) {
        surveyMapper.createSurveyQuestion(question);
    }

    /** ✅ 특정 설문조사의 질문 조회 */
    public List<SurveyQuestion> getSurveyQuestionsBySurveyId(int surveyId) {
        return surveyMapper.getSurveyQuestionsBySurveyId(surveyId);
    }

    /** ✅ 설문 응답 저장 */
    public void saveSurveyResponse(SurveyResponse response) {
        surveyMapper.saveSurveyResponse(response);
    }

    /** ✅ 특정 설문조사의 응답 조회 */
    public List<SurveyResponse> getSurveyResponsesBySurveyId(int surveyId) {
        return surveyMapper.getSurveyResponsesBySurveyId(surveyId);
    }
}
