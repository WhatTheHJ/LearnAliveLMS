package com.lms.attendance.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.lms.attendance.model.Post;
import com.lms.attendance.model.Schedule;
import com.lms.attendance.service.ScheduleService;

@RestController
@RequestMapping("/api/schedules")
public class ScheduleController {

    @Autowired
    private ScheduleService scheduleService;

    @GetMapping("/{userId}")
    public ResponseEntity<List<Schedule>> getAllSchedule(@RequestParam String userId) {
        try {
            // userId에 해당하는 일정 조회
            List<Schedule> schedules = scheduleService.getScheduleByUserId(userId);
            
            if (schedules.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 일정이 없다면 204 상태 반환
            }
            
            return ResponseEntity.ok(schedules); // 일정들이 있을 경우 200 상태와 함께 반환
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); // 에러가 발생하면 500 상태 반환
        }
    }
    
    // 일정 추가
    @PostMapping("/{userId}/addschedule")
    public ResponseEntity<String> createSchedule(@RequestBody Schedule schedule) {
        try {
            scheduleService.createSchedule(schedule);
            return new ResponseEntity<>("Schedule created successfully", HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Error creating schedule", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 일정 삭제
    @DeleteMapping("/{userId}/{scheduleId}")
    public ResponseEntity<String> deleteSchedule(@PathVariable int scheduleId) {
        try {
            scheduleService.deleteSchedule(scheduleId);
            return new ResponseEntity<>("Schedule deleted successfully", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Error deleting schedule", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 일정 수정
    @PutMapping("/{userId}/{scheduleId}")
    public ResponseEntity<String> updateSchedule(@PathVariable int scheduleId, @RequestBody Schedule schedule) {
        try {
            schedule.setScheduleId(scheduleId);  // Update the schedule ID
            scheduleService.updateSchedule(schedule);
            return new ResponseEntity<>("Schedule updated successfully", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Error updating schedule", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 날짜별 일정 조회
    @GetMapping("/{userId}/{date}")
    public ResponseEntity<List<Schedule>> getScheduleByDate(@PathVariable String date) {
        try {
            LocalDate localDate = LocalDate.parse(date);
            List<Schedule> schedules = scheduleService.getScheduleByDate(localDate);
            return new ResponseEntity<>(schedules, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 알람이 설정된 일정 조회
    @GetMapping("/{userId}/alarm")
    public ResponseEntity<List<Schedule>> getSchedulesWithAlarm() {
        try {
            List<Schedule> schedules = scheduleService.getSchedulesWithAlarm();
            return new ResponseEntity<>(schedules, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
